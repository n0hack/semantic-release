module.exports = {
  types: [
    { value: 'feat', name: 'feat: 새로운 기능 추가' },
    { value: 'fix', name: 'fix: 잘못된 동작이나 버그 수정' },
    { value: 'perf', name: 'perf: 성능 개선' },
    { value: 'refactor', name: 'refactor: 코드 리팩토링' },
    { value: 'revert', name: 'revert: 이전의 코드로 되돌림' },
    { value: 'style', name: 'style: 포맷팅이나 컨벤션에 따른 수정 사항 반영' },
    { value: 'test', name: 'test: 테스트 코드 추가 & 리팩토링' },
    { value: 'build', name: 'build: 빌드 관련 코드 추가 & 수정' },
    { value: 'ci', name: 'ci: CI 업데이트' },
    { value: 'docs', name: 'docs: 문서 작성 & 수정' },
    { value: 'chore', name: 'chore: 사소한 변경이나 패키지매니저 관리' },
  ],
  scopes: [
    'component',
    'css-style',
    'custom-hook',
    'store',
    'util',
    'api',
    'assets',
    'package',
    'lint',
    'formatting',
    'config',
    'workflow',
    'README',
  ],
  allowCustomScopes: true,
  allowBreakingChanges: ['feat', 'fix'],
  messages: {
    type: '✨ Commit 타입 선택:',
    scope: '✨ Commit 범위 선택 (선택사항):',
    customScope: '✨ Custom 범위 작성:\n',
    subject: '✨ Commit 제목 작성:\n',
    body: '✨ Commit 내용 작성 (선택사항) ["|" 사용 시 개행 처리]:\n',
    breaking: '✨ BREAKING CHANGES 사항 나열 (선택사항):\n',
    footer: '✨ 이 변경으로 끝난 이슈 나열 (선택사항). E.g.: #31, #34:\n',
    confirmCommit: '✨ 작성한 내용으로 커밋을 진행하겠습니까?',
  },
  skipQuestions: ['body'],
  subjectLimit: 100,
};
